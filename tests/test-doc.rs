use assert_cmd::Command;
use input::rust_test_file;

mod input;

const NOW: &str = "123";

fn output(text: &str) -> String {
    format!(
        r#"<!-- AUTOGENERATED doc, do not modify! {} -->
# Contract

{}
---

References

- :bricks: Initialization method. Needs to be called right after deployment.
- :eyeglasses: View only method, *i.e.*, does not modify the contract state.
- :writing_hand: Call method, i.e., does modify the contract state.

---

*This documentation was generated with* **near-doc v{}** <{}> *on {}*
"#,
        NOW,
        text,
        env!("CARGO_PKG_VERSION"),
        env!("CARGO_PKG_REPOSITORY"),
        NOW,
    )
}

fn near_doc() -> Command {
    let mut cmd = Command::cargo_bin("near-doc").unwrap();
    cmd.arg("--now").arg(NOW);
    cmd
}

#[test]
fn check_version() {
    let mut cmd = near_doc();
    cmd.arg("--version")
        .assert()
        .code(0)
        .stdout(format!("near-doc {}\n", env!("CARGO_PKG_VERSION")));
}

#[test]
fn zero_rust_files() {
    let mut cmd = near_doc();
    cmd.assert().code(0).stdout(output(""));
}

#[test]
fn single_rust_file() {
    let path = rust_test_file();

    let mut cmd = near_doc();
    cmd.arg(path.to_str().unwrap())
        .assert()
        .code(0)
        .stdout(output(
            r#"
## Methods for C

### :eyeglasses: `get_f128`

```typescript
get_f128(): Promise<U128>;
```

Line 1 for get_f128 first
Line 2 for get_f128 second

### :writing_hand: `set_f128`

```typescript
set_f128(args: { value: U128 }): Promise<void>;
```


## Methods for `I` interface

### :eyeglasses: `get`

```typescript
get(): Promise<U128>;
```

Single-line comment for get
"#,
        ));

    path.close().unwrap();
}
